// A description of all target platforms we support. We use this in d2c as well as in the build scripts.
// Remember, blank links separate the platforms.
// $Header: /scm/cvs/src/d2c/compiler/platforms.descr,v 1.92 2004/05/23 08:38:03 bruce Exp $

// A target description is a description of the target-environment we
// are compiling for.  This includes information such as what files
// are called, how to run the assembler, and how to run the C
// compiler.  It is possible to have multiple target descriptions for
// what is conceptually the same target environment.  This would
// happen if, say, there are two different C compilers (one target for
// each C compiler).
//
// Each description looks like a Dylan header, with keywords and
// values.  In a value, the character sequences \, \\, \n, and \t are
// interpretted as if they were inside Dylan string literals.
// Multi-line values might or might not do what you expect (this of
// course depends on what you expect); they work fine for feature
// lists..
//
// There can be no blank lines in the middle of a description, because
// like Dylan headers, blank lines mark the end of a description.
// Comments may start in column 0 only.  Comments don't count as blank
// lines, so you can use comments to visually break up a header
// without confusing the compiler.
//
// Target descriptions also support a simplified version of
// inheritance (no abstract targets).  See
// description of the inherit-from: keyword for more details.

// General keywords:
//
// platform-name: The name of the target.  This is what the compiler
// looks at when it tries to figure out what "foo" refers to in
// "-Tfoo".  The compiler internals do *not* get to look at this name;
// if it did, users could not define new targets.
//
// inherit-from: Inherit all keywords from these targets.  The targets to
// inherit from must be in this file and must come before the present
// target.
//
// default-features: Conditional compilation features that are defined
// on this platform.  When overriding an inheritted default-features,
// remember that you are giving an entirely new value to default
// features, *not* merely adding to the list of default-features you
// inheritted.


// Processor architectures:
//
// integer-length: [integer] The number of bits in a machine integer.
//
// big-endian?: Specifies the endianness of the machine.  #t for big, #f
// for little.  (Note that this information is currently not used.)
//
// pointer-size: Specifies the size, in bytes, of a 'void *' pointer.
// pointer-alignment: Specifies the alignment divisor, in bytes, of a 'void *'
// integer-size:, integer-alignment: Same for 'int's
// long-size:, long-alignment: Same for 'long's
// long-long-size:, long-long-alignment: Same for 'long long's (if available)
// single-size:, single-alignment:  Same for 'float's
// double-size:, double-alignment: Same for 'double's
// long-double-size:, long-double-alignment: Same for 'long double's
//
// single-mantissa-digits:, double-mantissa-digits:,
// long-double-mantissa-digits: Number of floating-point mantissa bits
// minimum-single-float-exponent:, maximum-single-float-exponent: Minimum
// and maximum floating-point exponent values for 'float's.
// minimum-double-float-exponent:, maximum-double-float-exponent: Same for
// 'double'.
// minimum-long-double-float-exponent:, maximum-long-double-float-exponent:
// Same for 'long double'. If not present, defaults to the values for 'double'.

// 32-bit
//
platform-name:			32-bit
integer-length:			32
pointer-size:			4
integer-size:			4
short-size:			2
long-size:			4
long-long-size:			8
single-size:			4
double-size:			8
double-alignment:		4
long-double-size:		8

// IEEE floating point
platform-name:			ieee-754
single-mantissa-digits:		24
minimum-single-float-exponent:	-125
maximum-single-float-exponent:	128
double-mantissa-digits:		53
minimum-double-float-exponent:	-1021
maximum-double-float-exponent:	1024

// Intel 80386 or higher:
platform-name:			x86
inherit-from:			32-bit ieee-754
default-features:		compiled-for-x86
big-endian?:			#f
long-long-alignment:		4
long-double-size:		12
long-double-alignment:		4
long-double-mantissa-digits:	64
minimum-long-double-float-exponent: -16381
maximum-long-double-float-exponent: 16384

// SPARC:
platform-name:			sparc
inherit-from:			32-bit ieee-754
default-features:		compiled-for-sparc
double-alignment:		8
big-endian?:			#t

// PowerPC:
platform-name:			ppc
inherit-from:			32-bit ieee-754
default-features:		compiled-for-ppc
big-endian?:			#t

// s390:
platform-name:			s390
inherit-from:			32-bit ieee-754
default-features:		compiled-for-s390
big-endian?:			#t

// HP-PA RISC processor:
platform-name:			hppa
inherit-from:			32-bit ieee-754
default-features:		compiled-for-hppa
big-endian?:			#t

// Alpha:
platform-name:			alpha
inherit-from:			ieee-754
default-features:		compiled-for-alpha
integer-length:			64
big-endian?:			#t
pointer-size:			8
short-size:			2
integer-size:			4
long-size:			8
single-size:			4
double-size:			8
long-double-size:		8

// MIPS:
platform-name:			mips
inherit-from:			32-bit ieee-754
default-features:		compiled-for-mips
big-endian?:			#t

// Operating system entries:
// 
// make-command: A string that gives the command for running the make
// utility.  This is not a format string.
//
// delete-file-command: A string that gives the command for deleting a
// file.
//
// compare-file-command: A format string for the command to compare
// two files.  Arg1 will be the first filename, arg2 will be the
// second filename.
//
// move-file-command: A format string for the command to move a file.
// The first arg will be the old filename, the second arg will be the
// new filename.
//
// makefile-name: The preferred name of a makefile, usually "Makefile"
// or "GNUmakefile".
//
// make-supports-phony-targets?: Whether or not the make utility
// supports .PHONY targets.  If it does, mk-build-tree will use them.
//
// recursive-make-command: A format string for the command to invoke
// make on a subdirectory.  The first arg will be the directory, and
// the second will be arguments passed to make (esp. the makefile
// target to build).
//
// makefiles-can-rebuild-themselves?: Whether or not the make utility
// supports makefiles that can rebuild themselves.  If it does,
// mk-build-tree will create makefiles that rebuild themselves
// whenever the Makegen or Defaults files change.
//
// make-jobs-flag: The flag the make-command takes to run multiple
// jobs in parallel.  If no such support is available, set to #f.
//
// uses-drive-letters?: Whether or not the platform uses drive letters
// in its paths (like MS-Windows does).
//
// environment-variables-can-be-exported?: Whether or not we can
// define and export environment variables from within a makefile.  If
// supported, mk-build-tree will generate makefiles that export the
// CCFLAGS variable.
//
// use-dbclink?: Whether or not we should use dbclink to link .dbc
// files together.  If #f, we use "cat $(OBJS) > target.dbc".
//
// link-doesnt-search-for-libs?: If #t, the compiler assume the linker
// has no library search path, so the compiler will provide pathnames
// for all library files.  Otherwise, the compiler will simply use the
// -l flag for some libraries (notably runtime and gc).  Currently unused.
//


// Microsoft Windows '95 or NT
// Note:  These rules depend on the presence of the MingW utilities in your
// system PATH.  You may elect to build using Microsoft's compiler, but
// you will have a bear of a time getting things to work without some
// UNIX-alike commands like "mv", "cmp", and GNU make.
platform-name:                  	win32
default-features:               	compiled-for-win32
					newlines-are-CRLF
					no-time
link-doesnt-search-for-libs?:   	#t
delete-file-command:            	rm -f %s
compare-file-command:           	cmp -s %s %s
move-file-command:              	mv -f %s %s
recursive-make-command:         	$(MAKE) -C %s %s
//recursive-make-command:         	cmd /c "cd %s && $(MAKE) %s"
use-dbclink?:				#t
uses-drive-letters?:            	#t
environment-variables-can-be-exported?: #t
makefile-name:                  	Makefile
make-supports-phony-targets?:   	#f
makefiles-can-rebuild-themselves?:      #f
make-command:                   	make 
make-jobs-flag:                         #f

// Generic Unix (parent class to linux, freebsd, solaris & hpux):
platform-name:				generic-unix
default-features:			compiled-for-unix posix-dig
object-filename-suffix:         	.o
shared-object-filename-suffix:         	.lo
library-filename-prefix:        	lib
library-filename-suffix:        	.a
shared-library-filename-suffix: 	.la
executable-filename-suffix:     
delete-file-command:            	rm -f
compare-file-command:           	cmp -s %s %s
move-file-command:              	mv -f %s %s
uses-drive-letters?:            	#f
environment-variables-can-be-exported?: #t
use-dbclink?:                           #f
makefile-name:				GNUmakefile
make-supports-phony-targets?:   	#t
makefiles-can-rebuild-themselves?:      #t
make-jobs-flag:				-j
recursive-make-command:         	$(MAKE) -C %s %s
libtool-command:			libtool

// Cygwin (automake, autoconf, libtool installed)
// added by Douglas M. Auclair (dauclair@hotmail.com)
platform-name:				cygnus
default-features:			compiled-for-cygnus
					newlines-are-CRLF
inherit-from:				generic-unix
make-command:				make
use-dbclink?:				#t
executable-filename-suffix:		.exe
long-double-mantissa-digits:		53
minimum-long-double-float-exponent:	-1021
maximum-long-double-float-exponent:	1024

// Mingwin (automake, autoconf, libtool installed)
// added by Douglas M. Auclair (dauclair@hotmail.com)
platform-name:				mingw32
default-features:			compiled-for-mingw32
					newlines-are-CRLF
inherit-from:				win32
make-command:				make
use-dbclink?:				#t
executable-filename-suffix:		.exe
double-alignment:			8
long-double-alignment:			4
long-double-mantissa-digits:		53
minimum-long-double-float-exponent:	-1021
maximum-long-double-float-exponent:	1024

// Linux:
platform-name:				linux
inherit-from:				generic-unix
default-features:			compiled-for-linux
make-command:                   	make

// BSDI:
// added by Douglas M. Auclair (doug@cotilliongroup.com) for his web-server
// hosting OS
platform-name:				bsdi
inherit-from:				generic-unix
default-features:			compiled-for-bsdi
make-command:                   	gmake

// FreeBSD:
platform-name:				freebsd
inherit-from:				generic-unix
default-features:			compiled-for-freebsd
make-command:                   	gmake
randomize-library-command:      	ranlib %s

// OpenBSD:
platform-name:				openbsd
inherit-from:				generic-unix
default-features:			compiled-for-openbsd
make-command:                   	gmake
randomize-library-command:      	ranlib %s

// NetBSD:
platform-name:				netbsd
inherit-from:				generic-unix
default-features:			compiled-for-netbsd
make-command:                   	gmake
randomize-library-command:      	ranlib %s

// Solaris:
platform-name:				solaris
inherit-from:				generic-unix
default-features:			compiled-for-solaris
make-command:                   	gmake

// HP/UX:
platform-name:				hpux
inherit-from:				generic-unix
default-features:			compiled-for-hpux
make-command:                   	gmake

// BeOS
platform-name:				beos
inherit-from:				generic-unix
default-features:			compiled-for-beos
make-command:                   	make

// Classic Macintosh
// Cheat and pretend we're a Unice
platform-name:				macintosh
inherit-from:				generic-unix
default-features:			compiled-for-macos
make-command:				dummy

// MacOS X and Darwin
platform-name:				darwin
inherit-from:				generic-unix
default-features:			compiled-for-darwin
make-command:                   	gnumake
randomize-library-command:              ranlib -c %s
libtool-command:			glibtool

// IRIX
platform-name:				irix
inherit-from:				generic-unix
default-features:			compiled-for-irix
make-command:                   	gmake


// Build-environment properties:
//
// object-filename-suffix: The suffix (aka extension) used to
// designate a file as an object-code file.  Includes the period.
//
// shared-object-filename-suffix: The suffix (aka extension) used to
// designate a file as an object-code file intended for use in a
// shared library.  Includes the period.
//
// library-filename-prefix: A string that goes in front of the name of
// the library when constructing the filename for that library.
// Usually blank on Windows, "lib" on Unix.
//
// library-filename-suffix: The suffix (aka extension) for library
// files.  Includes the period.  There can be more than one suffix for
// libraries; in this case, the extensions are separated by spaces,
// and the first extension listed will be the default extension.
//
// shared-library-filename-suffix: The suffix for shared libraries.
// If this is set, and the user doesn't specify '-static' on the
// d2c command line, search for shared version of library first.
//
// executable-filename-suffix: The suffix for executable filenames.
//
// compile-c-command: A format string that describes how to invoke the
// C compiler.  Arg1 for the format statement is the source code
// filename, arg2 is the object code filename.  Both filenames have
// the appropriate extensions already added.  The command will be
// output to a makefile.  In this makefile, the make variable
// $(CCFLAGS) will be defined; the compile-c-command is strongly
// encouraged to use this.
// 
// compile-c-for-shared-command: The same as compile-c-command, except
// that the resulting object file will be used to build a shared
// library.
//
// default-c-compiler-flags: Provides the default value for $(CCFLAGS)
// inside the makefile.  (see above)  A format string with one arg which is the
// location of the include directory for runtime.h.
//
// default-c-compiler-debug-flags: The same as the above, but used when
// "-g" is passed to d2c.
//
// libtool-command: A string that gives the command for running the
// libtool utility.  A value for $(LIBTOOL) is provided within the
// makefile. This is not a format string.
//
// link-library-command: A format string that gives the beginning of
// the command for linking a library.  Arg1 is the name of the archive
// (with extension), arg2 is the object files.
//
// link-shared-library-command: The same as link-library-command, but
// for linking shared libraries. d2c won't try to generate a shared
// library unless this is set.  An additional format argument, arg3,
// is the directory where the library will eventually be installed.
//
// randomize-library-command: A format string that describes how to
// invoke a command used for making a library linkable.  Arg1 is the
// name of the library, with the appropriate extension already added.
//
// link-executable-command: A format string that gives the beginning
// of the command for linking an executable file.  Arg1 is the name of
// the executable (with extension).  Arg2 is the object files.  Arg3
// are linker arguments.
//
// link-executable-flags: Flags that are passed to the
// link-executable-command as part of arg3.  (Libraries can specify
// additional linker args; these come before the link-executable-flags
// in arg3)  Remember that because of the silly way Unix links files,
// the order you specify these in *does* matter.
//
// path-separator: The character to use to separate path components
// (ie, in Unix, /, and in win32, \)
//
// Optional flags: (All defaults are #f)
//


// Visual C for Windows
// FIXME: debugging and profiling flags look suspicious
platform-name:			vc
default-features:		C-compiler-is-VC
compile-c-command:              cl $(CCFLAGS) -c %s -o %s
assembler-command:		cl $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:       -nologo -Ox -DWIN32 -I. -I%s
default-c-compiler-debug-flags: -nologo -Ox -DWIN32 -I. -I%s
default-c-compiler-profile-flags: -nologo -Ox -DWIN32 -I. -I%s
link-library-command:           lib -nologo -out:%s %s
link-executable-command:        link -nologo -out:%s %s %s
link-executable-flags:          /subsystem:console
link-doesnt-search-for-libs?:   #t
path-separator:        		/
object-filename-suffix:         .obj
library-filename-prefix:                
library-filename-suffix:        .lib
executable-filename-suffix:     .exe

platform-name:			gcc
default-features:		C-compiler-is-GCC
compile-c-command:              gcc $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:   $(LIBTOOL) --mode=compile gcc $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:	-I. -I%s -O2 -fomit-frame-pointer -fno-strict-aliasing
default-c-compiler-debug-flags:	-I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags:	-I. -I%s -pg -g -O -fno-inline-functions
assembler-command:		gcc $(CCFLAGS) -c %s -o %s
link-library-command:           ar qc %s %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc -o %s %s %s
link-shared-executable-command: $(LIBTOOL) --mode=link gcc -o %s %s %s
link-executable-flags:          $(GC_LIBS) -lm
link-debug-flags:               -g
link-profile-flags:		-pg -g
path-separator:        		/

platform-name:			beos-gcc
default-features:		C-compiler-is-GCC
compile-c-command:              gcc $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:   $(LIBTOOL) --mode=compile gcc $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:	-I. -I%s -g -O3
default-c-compiler-debug-flags:	-I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags: -I. -I%s -pg -g -O -fno-inline-functions
assembler-command:		gcc $(CCFLAGS) -c %s -o %s
link-library-command:           ar qc %s %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc -o %s %s %s
link-shared-executable-command: $(LIBTOOL) --mode=link gcc -o %s %s %s
link-executable-flags:          
path-separator:        		/

platform-name:			mac-cw
default-features:		C-compiler-is-GCC
compile-c-command:              gcc $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:   $(LIBTOOL) --mode=compile gcc $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:	-I. -I%s -g -O4 -finline-functions
default-c-compiler-debug-flags:	-I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags: -I. -I%s -pg -g -O -fno-inline-functions
assembler-command:		gcc $(CCFLAGS) -c %s -o %s
link-library-command:           ar qc %s %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc -o %s %s %s
link-shared-executable-command: $(LIBTOOL) --mode=link gcc -o %s %s %s
link-executable-flags:          $(GC_LIBS) -lm
path-separator:        		:

platform-name:			egcs
default-features:		C-compiler-is-EGCS
compile-c-command:              cc $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:   $(LIBTOOL) --mode=compile cc $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:	-I. -I%s -O2 -fomit-frame-pointer
default-c-compiler-debug-flags:	-I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags: -I. -I%s -pg -g -O -fno-inline-functions
assembler-command:		cc $(CCFLAGS) -c %s -o %s
link-library-command:           ar qc %s %s
link-executable-command: 	$(LIBTOOL) --mode=link cc -o %s %s %s
link-shared-executable-command: $(LIBTOOL) --mode=link cc -o %s %s %s
link-executable-flags:          $(GC_LIBS) -multiply_defined suppress         
path-separator:        		/


// FIXME:  Temporary measure until gcc-3.0 is the default
//
// Beware: some versions of gcc 3 have an optimizer bug,
// which requires -fno-strict-aliasing be active. Might be
// fixed as of 3.2.3, or not.
//


// Combinations:

platform-name:                 ppc-gcc30
default-features:              C-compiler-is-GCC
compile-c-command:              gcc-3.0 $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:   $(LIBTOOL) --mode=compile gcc-3.0 $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:      -I. -I%s -O2 -fomit-frame-pointer -fno-strict-aliasing
default-c-compiler-debug-flags:        -I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags:      -I. -I%s -pg -g -O -fno-inline-functions
assembler-command:             gcc-3.0 $(CCFLAGS) -c %s -o %s
link-library-command:           ar qc %s %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc-3.0 -o %s %s %s
link-shared-executable-command: $(LIBTOOL) --mode=link gcc-3.0 -o %s %s %s
link-executable-flags:          $(GC_LIBS) -lm
link-profile-flags:            -pg
path-separator:                        /

platform-name:			  ppc-gcc32
default-features:		  C-compiler-is-GCC
compile-c-command:		  gcc-3.2 $(CCFLAGS) -c %s -o %s
compile-c-for-shared-command:	  $(LIBTOOL) --mode=compile gcc-3.2 $(CCFLAGS) -c %s -o %s
default-c-compiler-flags:	  -I. -I%s -O2 -fomit-frame-pointer  -fno-strict-aliasing
default-c-compiler-debug-flags:	  -I. -I%s -g -O -fno-inline-functions
default-c-compiler-profile-flags: -I. -I%s -pg -g -O -fno-inline-functions
assembler-command:		  gcc-3.2 $(CCFLAGS) -c %s -o %s
link-library-command:		  ar qc %s %s
link-executable-command:	  $(LIBTOOL) --mode=link gcc-3.2 -o %s %s %s
link-shared-executable-command:	  $(LIBTOOL) --mode=link gcc-3.2 -o %s %s %s
link-executable-flags:		  $(GC_LIBS) -lm
link-profile-flags:		  -pg
path-separator:			  /

/// x86
platform-name:			x86-gcc32
inherit-from:			x86 gcc
default-c-compiler-flags:	-I. -I%s -O2 -fomit-frame-pointer -fno-strict-aliasing
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			x86-gcc33
inherit-from:			x86 gcc
default-c-compiler-flags:	-I. -I%s -O
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc -static -o %s %s %s

/// sparc
platform-name:			sparc-gcc30
inherit-from:			sparc gcc
default-c-compiler-flags:	-I. -I%s -O1
default-c-compiler-debug-flags: -I. -I%s -g -O0 -fno-inline-functions
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s
long-long-alignment:	8


// Fully supported platforms (i.e., we use these):
platform-name:			x86-linux-gcc
inherit-from:			gcc linux x86
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s
link-executable-command: 	$(LIBTOOL) --mode=link gcc -static -o %s %s %s

platform-name:			x86-linux-gcc32
inherit-from:			linux x86-gcc32

platform-name:			x86-linux-gcc33
inherit-from:			linux x86-gcc33

platform-name:			x86-bsdi-gcc
inherit-from:			gcc bsdi x86
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			x86-netbsd-gcc
inherit-from:			gcc netbsd x86
default-c-compiler-flags:       -I. -I%s -I/usr/X11R6/include -fomit-frame-pointer -fno-strict-aliasing
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			x86-beos-gcc
// Note:  These rules depend on the presence of the MingW utilities in your
// system PATH.  You may elect to build using Microsoft's compiler, but
// you will have a bear of a time getting things to work without some
// UNIX-alike commands like "mv", "cmp", and GNU make.
inherit-from:			beos-gcc beos x86
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			ppc-linux
inherit-from:			linux ppc
double-alignment:		8
long-double-alignment:		8

platform-name:			ppc-linux-gcc
inherit-from:			gcc ppc-linux
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:                 ppc-linux-gcc30
inherit-from:                  ppc-gcc30 ppc-linux
link-shared-library-command:    $(LIBTOOL) --mode=link gcc-3.0 -o %s %s -rpath %s

platform-name:			ppc-linux-gcc32
inherit-from:			ppc-gcc32 ppc-linux
link-shared-library-command:	$(LIBTOOL) --mode=link gcc-3.2 -o %s %s -rpath %s

// FreeBSD 2.x
platform-name:			x86-freebsd-aout-gcc
inherit-from:			gcc freebsd x86

// FreeBSD 3.x and above
platform-name:			x86-freebsd-elf-gcc
inherit-from:			gcc freebsd x86
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			x86-freebsd-elf-gcc32
inherit-from:			freebsd x86-gcc32

platform-name:			x86-freebsd-elf-gcc33
inherit-from:			freebsd x86-gcc33

platform-name:			alpha-linux-gcc
inherit-from:			gcc linux alpha
big-endian?:			#f
assembler-command:		gcc $(CCFLAGS) -x assembler-with-cpp -c %s -o %s
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			sparc-linux-gcc
inherit-from:			gcc linux sparc
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			s390-linux-gcc
inherit-from:			gcc linux s390
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			MacOS-ppc
inherit-from:			mac-cw macintosh ppc

platform-name:			ppc-macos-egcs
inherit-from:			egcs macintosh ppc
long-long-alignment:	4
long-double-size:		8
long-double-alignment:	4

platform-name:			ppc-darwin-gcc
inherit-from:			gcc darwin ppc
default-c-compiler-flags:	-I. -I%s -O2 -fomit-frame-pointer -no-cpp-precomp -Wno-long-double
default-c-compiler-debug-flags:	-I. -I%s -g -O -fno-inline-functions -no-cpp-precomp -Wno-long-double
default-c-compiler-profile-flags:	-I. -I%s -pg -g -O -fno-inline-functions -no-cpp-precomp -Wno-long-double
link-executable-flags:          $(GC_LIBS) -multiply_defined suppress         
long-long-alignment:	4
long-double-size:		8
long-double-alignment:	4

// Douglas M. Auclair's cygnus port (doug@cotilliongroup.com)
platform-name:			x86-cygnus-gcc
inherit-from:			gcc x86 cygnus
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

platform-name:			x86-cygnus-gcc32
inherit-from:			x86-gcc32 cygnus
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s
long-long-alignment:		4
double-alignment:		4

platform-name:			x86-cygnus-gcc33
inherit-from:			x86-gcc33 cygnus
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s
long-long-alignment:		8
double-alignment:		8

// Mingwin Port
platform-name:			x86-mingw32-gcc32
inherit-from:			gcc x86 mingw32
link-shared-library-command:    $(LIBTOOL) --mode=link gcc -o %s %s -rpath %s

// Solaris support maintained by Tom Emerson, tree@tiac.net
// Need to define default-features: below since all three of our
// inherited 'platforms' also define a default-features. But later on
// code relies on features that otherwise get stomped.

platform-name:			sparc-solaris-gcc30
inherit-from:			solaris sparc-gcc30
default-features:               compiled-for-solaris compiled-for-sparc C-compiler-is-GCC
long-double-size:               16
long-double-alignment:          8
long-double-mantissa-digits:	113
minimum-long-double-float-exponent: -16381
maximum-long-double-float-exponent: 16384

platform-name:			sparc-solaris-gcc
inherit-from:			gcc solaris sparc
default-features:               compiled-for-solaris compiled-for-sparc C-compiler-is-GCC
default-c-compiler-debug-flags: -I. -I%s -g -O0 -fno-inline-functions
double-alignment:               8
long-double-size:               16
long-double-alignment:          8
long-long-alignment:            8
long-double-mantissa-digits:	113
minimum-long-double-float-exponent: -16381
maximum-long-double-float-exponent: 16384

// Doug Auclair's taken over Solaris support ... here's a Solaris-x86 port:
platform-name:			x86-solaris-gcc
inherit-from:			gcc solaris x86

// MIPS support maintained by David Lichteblau, lichteblau@fhtw-berlin.de
// This is supposed to work, but I don't use it extensively. 
platform-name:			mips-irix-gcc
inherit-from:			gcc irix mips
default-features:               compiled-for-irix compiled-for-mips C-compiler-is-GCC
link-shared-library-command:    $(LIBTOOL) --mode=link cc -n32 -Wl,-woff,85 -o %s %s -rpath %s

// This is untested. 
platform-name:			sparc-openbsd-gcc
inherit-from:			gcc openbsd sparc
default-features:               compiled-for-openbsd compiled-for-sparc C-compiler-is-GCC
default-c-compiler-debug-flags: -I. -I%s -g -O0 -fno-inline-functions


// Other platforms:
//   These all worked at one point, but since none of the development team 
//   members use them, we can't be too sure...
platform-name:			x86-win32-vc
inherit-from:			vc x86 win32
long-double-mantissa-digits:	53
minimum-long-double-float-exponent: -1021
maximum-long-double-float-exponent: 1024

// Bruce Hoult made this work on HP/UX 10.20
// HP/UX 11 not tried yet
// Shared libraries disabled for now so we can get 2.3.11 out.
// The problem is the -lm, which is required by recent FP routine changes
platform-name:				hppa-hpux-gcc
inherit-from:				gcc hpux hppa
default-features:               	compiled-for-hpux compiled-for-hppa C-compiler-is-GCC
library-filename-suffix:        	.a .sl
link-library-command:           	/bin/ar qc %s %s
link-executable-command:        	$(LIBTOOL) --mode=link gcc -o %s %s %s
//link-shared-library-command:    	$(LIBTOOL) --mode=link gcc -o %s %s -L/lib/pa1.1 -lm -rpath %s
link-executable-flags:          	$(GC_LIBS) -L/lib/pa1.1 -lm
double-alignment:                       8
long-long-alignment:                    8
long-double-size:                       8
long-double-alignment:                  8
