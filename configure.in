dnl
dnl The new and improved configure file for Gwydion Dylan!
dnl This is based on the old configure file, but rewritten to
dnl support our goals for maintaining and improving the compiler.
dnl
dnl Rules are annotated with codes:
dnl   [C] d2c-specific
dnl   [?] Might be specific to one or the other
dnl
dnl We don't support cross-compilation yet, but we're working on
dnl it.

#--------------------------------------------------------------------
# Emit configure initialization, verify that we're in the right
# source directory, require autoconf version 2.12, and start 
# processing config.h.in.
#--------------------------------------------------------------------

AC_INIT(d2c/compiler/platforms.descr)
AC_PREREQ(2.50)
AC_CONFIG_HEADER(config.h)

#--------------------------------------------------------------------
# Version/package information.
#--------------------------------------------------------------------

PACKAGE="gwydion-dylan"

VERSION="`cat $srcdir/version`"

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

#--------------------------------------------------------------------
# This is used in conjunction with the output of 'd2c --compiler-info'
# to decide when d2c needs a full bootstrap.  Increment the value here
# whenever the dump format or the interaction between the runtime and
# the compiler changes.  (Please also increment the "preX" part of
# $srcdir/version when incrementing this value.)
#--------------------------------------------------------------------

CURRENT_BOOTSTRAP_COUNTER=1010
AC_SUBST(CURRENT_BOOTSTRAP_COUNTER)

#--------------------------------------------------------------------
# Make srcdir absolute to keep Mindy's build system from choking.
#--------------------------------------------------------------------

srcdir=`(cd $srcdir; pwd)`

#--------------------------------------------------------------------
# buildroot is the directory in which we run configure.
#--------------------------------------------------------------------

buildroot=`pwd`
AC_SUBST(buildroot)
top_builddir=$buildroot
AC_SUBST(top_builddir)

#--------------------------------------------------------------------
# recheck is how we invoked configure so we can re-run it during
# bootstrap.
#--------------------------------------------------------------------

recheck="$0 $ac_configure_args"
AC_SUBST(recheck)

#--------------------------------------------------------------------
# [M] See if the #!interpreter syntax is supported.
#--------------------------------------------------------------------

AC_SYS_INTERPRETER
if test $ac_cv_sys_interpreter = no; then
    AC_DEFINE(NO_SHARP_BANG, [1], [Define if no #! interpreter syntax is supported.])
fi

#--------------------------------------------------------------------
# Find out what type of system we appear to be, and work out
# whether there's any cross-compiling going on.
#--------------------------------------------------------------------

AC_CANONICAL_BUILD  # Find the system type
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AC_ARG_PROGRAM      # Provide support for name prefixes
AC_PROG_CC          # Specify when cross-compiling.

AC_DEFUN([GD_D2C_SYSTEM],[
case $1 in
    # does-work stuff
    i*86-*-freebsd2.*) $2=x86-freebsd-aout-gcc ;;
    i*86-*-freebsd*)   $2=x86-freebsd-elf-gcc ;;
    i*86-*-linux*) $2=x86-linux-gcc ;;
    i*86-pc-cygwin*) $2=x86-cygnus-gcc ;;

    # might-work stuff
    x86_64-*-linux-gnu*) $2=x86_64-linux-gcc ;;
    i*86-*-solaris*)
       if test "$CC" = "cc"; then $2=x86-solaris-sunpro
       else $2=x86-solaris-gcc
       fi ;;
    powerpc-apple-darwin*)
        case `gcc -dumpversion` in
             4.*) $2=ppc-darwin-gcc4 ;;
             *)   $2=ppc-darwin-gcc ;;
        esac ;;
    i*86-apple-darwin*)
        case $CC in
            *clang*) $2=x86-darwin-clang ;;
            *)
                case `gcc -dumpversion` in
                    4.*) $2=intel-darwin-gcc4 ;;
                    *)   $2=intel-darwin-gcc ;;
                esac ;;
        esac ;;
    x86_64-apple-darwin*)
        case $CC in
            *clang*) $2=x86_64-darwin-clang ;;
            *) $2=x86_64-darwin-gcc ;;
        esac ;;
    powerpc-*-linux-gnu*)
        case `gcc -dumpversion` in
             4.*) $2=ppc-linux-gcc4 ;;
             *)   $2=ppc-linux-gcc ;;
        esac ;;
    arm*-*-linux-gnu*) $2=arm-linux-gcc ;;
    s390*-*-linux-gnu*) $2=s390-linux-gcc ;;
    sparc*-*-linux-gnu*) $2=sparc-linux-gcc ;;
    sparc*-solaris*)
       if test "$CC" = "cc"; then $2=sparc-solaris-sunpro
       else $2=sparc-solaris-gcc
       fi ;;

    # experimental stuff
    i*86-*-l4*) $2=x86-l4-gcc ;;

    # old stuff
    i*86-pc-bsdi*) $2=x86-bsdi-gcc ;;
    alpha*-*-linux-gnu*) $2=alpha-linux-gcc ;;
    hppa*-hp-hpux*) $2=hppa-hpux-gcc ;;
    sparc*-openbsd*) $2=sparc-openbsd-gcc ;;
    i*86-pc-mingw32*) $2=x86-mingw32-gcc ;;
    i*86-pc-none) $2=x86-win32-vc ;;
    i*86-pc-beos) $2=x86-beos-gcc ;;
    mips-sgi-irix*) $2=mips-irix-gcc ;;
    i*86-*-netbsd*) $2=x86-netbsd-gcc ;;

    *) $2=unknown-unix ;;
esac])

version="`cat $srcdir/version`"
AC_SUBST(version)
echo "Running configure for Gwydion Dylan version $version"

AC_MSG_CHECKING(d2c build system type)
GD_D2C_SYSTEM($build,d2c_build)
AC_MSG_RESULT($d2c_build)
AC_SUBST(d2c_build)

AC_MSG_CHECKING(d2c host system type)
GD_D2C_SYSTEM($host,d2c_host)
AC_MSG_RESULT($d2c_host)
AC_SUBST(d2c_host)

AC_MSG_CHECKING(d2c target system type)
if test "x$target_alias" != "x"; then
  d2c_target=$target_alias
else
  GD_D2C_SYSTEM($target,d2c_target)
fi
AC_MSG_RESULT($d2c_target)
AC_SUBST(d2c_target)

#----------------------------------------------------------
# Now that I know the build version, and particularly, if
# it's cygwin, I can add executable endings to those filenames
# Douglas M. Auclair, doug@cotilliongroup.com
#----------------------------------------------------------
AC_MSG_CHECKING(executable endings)
exe_ext=""
cygnus_line_hack=""
case $d2c_build in
    *cygwin*|x86-mingw*)
        exe_ext=".exe"
        cygnus_line_hack="\$_ =~ s/\r//;"
    ;;
esac
AC_MSG_RESULT($exe_ext)
AC_SUBST(exe_ext)
AC_SUBST(cygnus_line_hack)

AC_SUBST(host_cpu)

DYLAN_HOST_OS="`uname -s`"
AC_SUBST(DYLAN_HOST_OS)

DYLAN_OS_VERSION="`uname -r`"
AC_SUBST(DYLAN_OS_VERSION)

AC_MSG_CHECKING(to see if we're cross-compiling)
d2c_cross_compiling=no
if test "$d2c_target" != "$d2c_host"; then
    d2c_cross_compiling=yes
fi
AC_MSG_RESULT($d2c_cross_compiling)

#AC_MSG_CHECKING(to see if we're building a cross-compiler)
#cross_compiler=no
#if test "$host" != "$target"; then
#    cross_compiler=yes
#fi
#AC_MSG_RESULT($cross_compiler)

#--------------------------------------------------------------------
# Find the current date, for substitution into man pages.
#--------------------------------------------------------------------

DATE="`date '+%d %B %Y'`"
AC_SUBST(DATE)

#--------------------------------------------------------------------
# Look for various programs which we might need. If these are
# missing, we want to deal with them early.
#--------------------------------------------------------------------

AC_PATH_PROG(PERL, perl, no)

if test "$PERL" = no; then
    AC_MSG_ERROR(Cannot build without perl to run gen-makefile)
fi

AC_PROG_INSTALL
AC_PROG_LN_S

AC_CHECK_TOOL(RANLIB, ranlib, :)

AC_PATH_PROG(EMACS, emacs, no)
if test "$EMACS" = no; then
    AC_PATH_PROG(EMACS, xemacs, no)
fi

#--------------------------------------------------------------------
# Configure libtool.
#--------------------------------------------------------------------

AC_PROG_LIBTOOL
LIBTOOL="${CONFIG_SHELL-/bin/sh} $buildroot/libtool"
AC_SUBST(enable_shared)
AC_SUBST(enable_static)

#--------------------------------------------------------------------
# Study our build environment carefully.
#--------------------------------------------------------------------

# Look for an installed d2c.
AC_PATH_PROG(D2C, d2c, no)
d2c_path=`echo $ac_cv_path_D2C|sed -e 's|/bin/d2c||'`

# Does the user explicitly want a bootstrap?
AC_ARG_ENABLE(bootstrap,
[  --enable-bootstrap  Force a two-stage d2c bootstrap even if the
                      bootstrap counts match.  This saves hacking
                      with main.dylan and configure.in every time
                      you want to test some little change in the
                      runtime system])
enable_bootstrap=${enable_bootstrap:-no}

# If d2c is present, try to ask it some questions.
if test "$D2C" != no; then
    _DCI_DYLAN_LID_FORMAT_VERSION=0
    _DCI_D2C_BOOTSTRAP_COUNTER=0
    _DCI_D2C_RUNTIME_SUBDIR=
    if $D2C --compiler-info > "$srcdir/compiler-info" 2> /dev/null; then
        . "$srcdir/compiler-info"
    fi
    rm -f "$srcdir/compiler-info"

    echo "Found the following Dylan compiler information:"
    echo "    LID format version:       $_DCI_DYLAN_LID_FORMAT_VERSION"
    echo "    d2c bootstrap counter:    $_DCI_D2C_BOOTSTRAP_COUNTER"
    echo "    d2c runtime subdirectory: $_DCI_D2C_RUNTIME_SUBDIR"
else
    AC_MSG_ERROR([Cannot find d2c in your PATH.  An existing d2c binary
(version 2.4.0 or later) is required to build $PACKAGE-$VERSION])
fi

lid_format_version=$_DCI_DYLAN_LID_FORMAT_VERSION
AC_SUBST(lid_format_version)

AC_PATH_PROG(MELANGE, melange, no)
AC_MSG_CHECKING(if $MELANGE needs flags)
need_melange_flags=no
MELANGEFLAGS=
case "${host}" in
*-apple-darwin*)
    if ! $MELANGE --defines | grep __restrict > /dev/null; then
        MELANGEFLAGS="-D__restrict=/\*\*/"
        need_melange_flags=yes
    fi
;;
esac
AC_MSG_RESULT($need_melange_flags)
AC_SUBST(MELANGEFLAGS)

#--------------------------------------------------------------------
# Deal with user-space probes, like DTrace, System Tap.
#--------------------------------------------------------------------

WITH_TRACING_DEFAULT='no'
case "${host}" in
    *darwin8*) WITH_TRACING_DEFAULT='no' ;;
    *darwin*) WITH_TRACING_DEFAULT='dtrace' ;;
esac

AC_MSG_CHECKING([whether to include tracing support])
AC_ARG_WITH([tracing],
            [AS_HELP_STRING([--with-tracing=(dtrace,systemtap,no)],
                            [Enable inclusion of tracing support.)])],
            [WITH_TRACING="${withval}"], [WITH_TRACING=${WITH_TRACING_DEFAULT}])
AC_MSG_RESULT(${WITH_TRACING})

if test "x${WITH_TRACING}" != xdtrace -a "x${WITH_TRACING}" != xsystemtap -a "x${WITH_TRACING}" != xno; then
    AC_MSG_ERROR([${WITH_TRACING} is not a valid value for --with-tracing. Use 'dtrace', 'systemtap' or 'no'.])
fi

if test "x${WITH_TRACING}" = xdtrace; then
    # Consider adding FreeBSD and Solaris support here.
    case "${host}" in
      *darwin*) ;;
      *) AC_MSG_ERROR([dtrace is currently only supported on Mac OS X.]) ;;
    esac
    AC_CHECK_PROGS(DTRACE, dtrace)
    if test -z "$DTRACE"; then
      AC_MSG_ERROR([dtrace not found, consider using --without-tracing.])
    fi
fi

# This is not complete yet.
if test "x${WITH_TRACING}" = xsystemtap; then
    AC_MSG_WARN([systemtap support is not yet ready for use.])
    case "${host}" in
      *linux*) ;;
      *) AC_MSG_ERROR([systemtap is only available on Linux.]) ;;
    esac
    AC_CHECK_PROGS(DTRACE, dtrace)
    if test -z "$DTRACE"; then
      AC_MSG_ERROR([dtrace not found, consider using --without-tracing.])
    fi
    AC_CHECK_HEADER([sys/sdt.h], [SDT_H_FOUND='yes'],
                    [SDT_H_FOUND='no';
                     AC_MSG_ERROR([systemtap support needs sys/sdt.h header])])
fi


#--------------------------------------------------------------------
# Determine our "build scenario".
#--------------------------------------------------------------------

AC_MSG_CHECKING(which build scenario to use)

if test $CURRENT_BOOTSTRAP_COUNTER -ne $_DCI_D2C_BOOTSTRAP_COUNTER; then
    enable_bootstrap=yes
fi

if test -x "$buildroot/bootstrap_compiler/d2c"; then
    SCENARIO=SECOND_STAGE
    enable_bootstrap=no
    bootstrap_d2c="$buildroot/bootstrap_compiler/d2c"
    D2C="$bootstrap_d2c -p$srcdir/d2c/compiler/platforms.descr"
elif test "$enable_bootstrap" = yes; then
    SCENARIO=BOOTSTRAPPING
    enable_shared=no
elif test "$d2c_cross_compiling" = yes; then
    SCENARIO=CROSS_COMPILING
else
    SCENARIO=REGULAR_BUILD
fi

AC_MSG_RESULT($SCENARIO)

echo "Using the following build parameters:"
echo "    Cross compiling:          $d2c_cross_compiling"
echo "    Bootstrapping:            $enable_bootstrap"

#--------------------------------------------------------------------
# Sanity-check our "build scenario".
#--------------------------------------------------------------------

if test "$SCENARIO" = CROSS_COMPILING -o "$d2c_cross_compiling" = yes; then
    AC_MSG_WARN([\
Cannot cross-compile.])
fi

#--------------------------------------------------------------------
# Record our build parameters.
#--------------------------------------------------------------------

AC_SUBST(d2c_cross_compiling)
AC_SUBST(enable_bootstrap)

#--------------------------------------------------------------------
# If we're bootstrapping with d2c, look for the installed runtime.
#--------------------------------------------------------------------

# Runtime libraries which must match the compiler used to build d2c.
RUNTIME_LIBRARIES="libruntime.a dylan.lib.du melange-support.lib.du transcendental.lib.du"
EXTRA_RUNTIME_LIBRARIES="libgc.a libdylan.a libdylan-dylan.a llibmelange.a libmelange-support.a libmelange-support-dylan.a libtranscendental.a libtranscendental-dylan.a"

# Delete our local runtime directory, if it exists.
LOCAL_RUNTIME="$buildroot"/previous_runtime
AC_SUBST(LOCAL_RUNTIME)
if test -d "$LOCAL_RUNTIME"; then
    rm -rf "$LOCAL_RUNTIME"
fi

# Process our --with-existing-runtime option.
AC_ARG_WITH(existing-runtime,
[  --with-existing-runtime=RUNTIME_DIRECTORY
                          Look for the d2c runtime libraries in a different
                          place when bootstrapping. Defaults to
                          {prefix}/lib/dylan. This is only applicable when
                          building in BOOTSTRAPPING mode.])
with_existing_runtime=${with_existing_runtime:-no}
if test "$with_existing_runtime" = yes; then
    with_existing_runtime=no
fi

AC_ARG_WITH(existing-runtime-header,
[  --with-existing-runtime-header=PATH_TO_RUNTIME_H
                                Location of runtime.h file of existing
                                d2c for bootstrapping purposes.])
existing_runtime_header=${with_existing_runtime_header:-"$d2c_path/include/runtime.h"}


# If we're bootstrapping with d2c, create local links to each runtime file.
if test $SCENARIO = BOOTSTRAPPING; then
    AC_MSG_CHECKING(for existing d2c runtime)
    if test "$with_existing_runtime" = no; then
        relative_runtime="lib/dylan/$_DCI_D2C_RUNTIME_SUBDIR"
        with_existing_runtime="$d2c_path/$relative_runtime"
    fi
    AC_MSG_RESULT($with_existing_runtime)

    # Make a directory to hold the pre-existing runtime.
    mkdir "$LOCAL_RUNTIME"

    # Make links to our runtime libraries.
    for f in $RUNTIME_LIBRARIES; do
        lib="$with_existing_runtime/$f"
        if test -r $lib; then
            ln -s "$lib" "$LOCAL_RUNTIME"
        else
            AC_MSG_ERROR([
Cannot find $f in $with_existing_runtime.
You may need to specify the --with-existing-runtime option to configure; see
'./configure --help' for details.])
        fi
    done
    for f in $EXTRA_RUNTIME_LIBRARIES; do
        lib="$with_existing_runtime/$f"
        if test -r $lib; then
            ln -s "$lib" "$LOCAL_RUNTIME"
        fi
    done



    # Make a link to our runtime.h file.
    if test ! -f "$existing_runtime_header"; then
        AC_MSG_ERROR([Cannot locate runtime.h for the installed d2c. ($existing_runtime_header)])
    fi
    ln -s "$existing_runtime_header" "$LOCAL_RUNTIME"
fi

AC_ARG_WITH(site-dylan-prefix,
[  --with-site-dylan-prefix=SITE_DYLAN_PREFIX
                          Use this prefix for the site-local Dylan
                          directory. You might want to set this to
                          /usr/local if you install Gwydion Dylan in
                          /usr, in order to be FSSTND compliant.])
with_site_dylan_prefix=${with_site_dylan_prefix:-no}
if test "$with_site_dylan_prefix" = yes; then
    with_site_dylan_prefix=no
fi
AC_SUBST(with_site_dylan_prefix)

#--------------------------------------------------------------------
# Check for HP shared library emulation on ELF systems
# testing for /usr/include/dlfcn.h might be a good automatic test?
#--------------------------------------------------------------------

AC_CHECK_LIB(dld, shl_load, [AC_DEFINE(HAVE_LIBDLD, [1], [Define to 1 if you have shl_load or dlopen])
                             LIBS="$LIBS -ldld"])
AC_CHECK_LIB(dl, dlopen,[AC_DEFINE(HAVE_LIBDLDELF, [1], [Define to 1 if you have dlopen()])
                         AC_DEFINE(HAVE_LIBDLD)
                         AC_LIBOBJ([shl])
                         LIBS="-ldl" GC_LIBS="-ldl"])
AC_CHECK_LIB(pthread, pthread_create,[AC_DEFINE([HAVE_PTHREAD],
                                                [],
                                                [pthread library available])
                                      LIBS="$LIBS -lpthread"
                                      GC_LIBS="$GC_LIBS -lpthread"])

#--------------------------------------------------------------------
# Look for gc, set GC_CFLAGS and GC_LIBS
#--------------------------------------------------------------------
AC_ARG_WITH(gc-prefix, [  --with-gc-prefix=PFX    Prefix where Boehm gc is installed],
            gc_prefix="$withval", gc_prefix="")
if test "x$gc_prefix" != x; then
  GC_CFLAGS="-I$gc_prefix/include -I$gc_prefix/include/gc"
  GC_LIBS="-L$gc_prefix/lib -lgc $GC_LIBS"
else
  GC_LIBS="-lgc $GC_LIBS"
fi
save_CPPFLAGS="$CPPFLAGS"
save_LIBS="$LIBS"
CPPFLAGS="$GC_CFLAGS $CPPFLAGS"
LIBS="$GC_LIBS $LIBS"
FOUND_BOEHM=no
AC_CHECK_HEADERS(gc.h gc/gc.h, FOUND_BOEHM=yes,)
if test "$FOUND_BOEHM" = no; then
AC_MSG_ERROR([
Cannot locate the Boehm-Weiser conservative garbage collector. Please
download the library from http://www.hpl.hp.com/personal/Hans_Boehm/gc/
or from your operating system distribution.])
fi
AC_CHECK_LIB(gc, GC_malloc_ignore_off_page, ,AC_MSG_ERROR([
Cannot link with the Boehm-Weiser conservative garbage collector library.
Please download the library from http://www.hpl.hp.com/personal/Hans_Boehm/gc/
or from your operating system distribution.]))
CPPLAGS="$save_CPPLAGS"
LIBS="$save_LIBS"
AC_SUBST(GC_CFLAGS)
AC_SUBST(GC_LIBS)

#--------------------------------------------------------------------
# Look for mmap/mprotect support
#--------------------------------------------------------------------
AC_CHECK_HEADERS(unistd.h sys/mman.h)
AC_CHECK_FUNCS(mprotect getpagesize)

#--------------------------------------------------------------------
# Look for getrlimit, getrusage
#--------------------------------------------------------------------
AC_CHECK_HEADERS(sys/time.h sys/resource.h)
AC_CHECK_FUNCS(getrlimit getrusage)

#--------------------------------------------------------------------
# How many threads do we want each invocation of d2c to use
#--------------------------------------------------------------------
AC_ARG_WITH(thread-count,
[  --with-thread-count=INTEGER
        How many threads should d2c use. Currently only
        tells the sub-make process the same thing.])
with_thread_count=${with_thread_count:-no}
if test "$with_thread_count" = yes; then
    with_thread_count=no
fi
AC_SUBST(with_thread_count)

#====================================================================
# Start of section lifted from original configure.in.
# We might not need all the things we test for, but it's not worth
# the effort to trim this down to size. Note that much of this is
# Mindy-specific and doesn't apply to d2c. Like most things about
# configure, this should be considered magical until it breaks.
#====================================================================

#--------------------------------------------------------------------
# Establish the default compile options for cc
#--------------------------------------------------------------------
AC_ARG_ENABLE(debug, [  --enable-debug=[no/minimum/yes/profiling] turn on debugging [default=minimum]],,enable_debug=minimum)
AC_SUBST(enable_debug)
if test $enable_debug = yes; then
    AC_DEFINE(GD_DEBUG, [1], [Define to 1 if debugging is enabled.])
fi

case `basename $CC` in
gcc* | *-gcc*)
    if test $enable_debug = yes; then
        CCOPTS="-g -O -fno-inline -Wall -pedantic"
    elif test $enable_debug = minimum; then
        CCOPTS="-g -O2 -Wall"
    else
        CCOPTS="-O4"
    fi
    EXTRA_INCLUDE_DIR="`$CC --print-file-name=include`"
    if test "X$EXTRA_INCLUDE_DIR" = Xinclude; then
        EXTRA_INCLUDE_DIR=
    fi
    ;;
cl|cl.exe)
    if test $enable_debug = yes; then
        CCOPTS="-nologo /W3 /ZI/Ge"
    else
        CCOPTS="-nologo"
    fi
    ;;
*)
    CCOPTS="-g -O"
    ;;
esac
AC_SUBST(CCOPTS)
AC_SUBST(EXTRA_INCLUDE_DIR)

#--------------------------------------------------------------------
#      Determine whether the time library can be supported
#--------------------------------------------------------------------

AC_MSG_CHECKING([whether struct tm has a tm_gmtoff field])
AC_TRY_COMPILE([#include <time.h>], [struct tm t; long g = t.tm_gmtoff;],
  [AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE_TM_GMTOFF, [1], [Define to 1 if can use struct tm's tm_gmtoff.])],
  [AC_MSG_RESULT(no)
   AC_MSG_CHECKING([whether daylight and timezone are supported])
   AC_TRY_LINK([#include <time.h>], [int a = daylight; long b = timezone;],
     [AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_DAYLIGHT, [1], [Define to 1 if using daylight.])],
     [AC_MSG_RESULT(no)
      AC_MSG_CHECKING([whether _daylight and _timezone are supported])
      AC_TRY_LINK([#include <time.h>], [int a = _daylight; long b = _timezone;],
        [AC_MSG_RESULT(yes)
         AC_DEFINE(HAVE_CYGNUS_DAYLIGHT, [1], [Define to 1 if using Cygnus daylight.])])])])

#--------------------------------------------------------------------
# Checks for the io and system libraries
#--------------------------------------------------------------------

AC_CHECK_FUNCS(localtime_r)
AC_STRUCT_TIMEZONE
AC_CHECK_MEMBERS([struct stat.st_blksize])
AC_CHECK_MEMBERS([struct stat.st_birthtimespec])
AC_CHECK_MEMBERS([struct stat.st_ctimespec])
AC_CHECK_MEMBERS([struct stat.st_atimespec])
AC_CHECK_MEMBERS([struct stat.st_mtimespec])
AC_CHECK_MEMBERS([struct stat.st_ctim])
AC_CHECK_MEMBERS([struct stat.st_atim])
AC_CHECK_MEMBERS([struct stat.st_mtim])

#--------------------------------------------------------------------
# This next section is lifted from tcl-7.3, it deals with
# establishing which of the known faults in POSIX compliance
# need to be corrected.
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# Supply substitutes for missing POSIX library procedures, or
# set flags so Tcl uses alternate procedures.
#--------------------------------------------------------------------

AC_REPLACE_FUNCS(getcwd opendir strerror strstr)
AC_REPLACE_FUNCS(strtol memmove tmpnam waitpid)

#--------------------------------------------------------------------
# Include sys/select.h if it exists and if it supplies things
# that appear to be useful and aren't already in sys/types.h.
# This appears to be true only on the RS/6000 under AIX.  Some
# systems like OSF/1 have a sys/select.h that's of no use, and
# other systems like SCO UNIX have a sys/select.h that's
# pernicious.  If "fd_set" isn't defined anywhere then set a
# special flag.
#--------------------------------------------------------------------

AC_MSG_CHECKING(fd_set)
AC_TRY_COMPILE([#include <sys/types.h>],
    [fd_set readMask, writeMask;], AC_MSG_RESULT(yes),
    [AC_EGREP_HEADER(fd_mask, sys/select.h, AC_DEFINE(HAVE_SYS_SELECT_H, [1], [Define to 1 if have to use fd_mask from sys/select.h.])
                     AC_DEFINE(NO_FD_SET, [1], [Define to 1 if you are somehow missing fd_set]))
     AC_MSG_RESULT(no fd_set)])

#--------------------------------------------------------------------
# Check for various typedefs and provide substitutes if
# they don't exist.
#--------------------------------------------------------------------

AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

#--------------------------------------------------------------------
# End of the section lifted from tcl.
#--------------------------------------------------------------------

#--------------------------------------------------------------------
# Check for libm
#--------------------------------------------------------------------

AC_CHECK_LIB(m, sin, LIBS="$LIBS -lm")

#--------------------------------------------------------------------
# Check for rint() and other math library functions
#--------------------------------------------------------------------

AC_REPLACE_FUNCS(rint)
AC_CHECK_FUNCS(frexpf frexpl ldexpf ldexpl logl log2l log10l log2)
AC_CHECK_FUNCS(fabsf sinf cosf tanf asinf acosf atanf atan2f expf sqrtf)
AC_CHECK_FUNCS(logf log2f log10f powf sinhf coshf tanhf)

#--------------------------------------------------------------------
# See if cfmakeraw() is already declared
#--------------------------------------------------------------------

AC_CHECK_DECLS([cfmakeraw],,,[#include <termios.h>])

#====================================================================
# End of section lifted from original configure.in.
#====================================================================

#--------------------------------------------------------------------
#  Determine sizes of important C types, used by mindy's gc.
#--------------------------------------------------------------------

AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(void *, 4)

#--------------------------------------------------------------------
#  Determine whether the host architecture is little-endian, for use
#  by the operating-system library. We define our own instead of
#  using the builting AC_C_BIGENDIAN to make things a bit cleaner
#  and to avoid an annoying warning from autoconf from the implicit
#  call to AC_TRY_RUN that the builtin macro uses.
#
#  CAVEAT HACKER: this will need to be revisited if we ever allow
#                 cross compilation.
#--------------------------------------------------------------------

AC_MSG_CHECKING(whether byte ordering is little-endian)
AC_TRY_RUN([
int main()
{
    unsigned short foo = 0xFEFF;
    exit(((unsigned char *)&foo)[0] != 0xFE);
}
], little_endian=["#f"], little_endian=["#t"], little_endian=["#f"])
AC_MSG_RESULT("$little_endian")
AC_SUBST(little_endian)

#--------------------------------------------------------------------
# Build and run config.status.
#--------------------------------------------------------------------

# Autoconf only seems to create one directory level at a time, so we need to
# create several directories which contain no Makefile.in.
# Note that we should probably do this in config.status, not configure,
# but since it's idempotent we can get away with doing it here.
$srcdir/mkinstalldirs tools

# Make sure there are no *.dylan.in files in this list. They cause two
# problems: d2c expects all sources to live in the srcdir (which is a problem
# in and of itself) and configure tries to create the *.dylan files before
# we build our buildroot tree causing things to flame out horribly.
AC_OUTPUT(Defaults tools/shared-misc/gen-makefile tools/shared-misc/mk-build-tree tools/shared-misc/line-count tools/shared-misc/make-dylan-app tools/shared-misc/make-dylan-lib tools/shared-misc/update-libdirs tools/unix-misc/mk-rcs-links doc/Makefile doc/dylan.7 doc/gwydion.7 doc/d2c.1 doc/dybug.1 doc/melange.1 doc/parsergen.1 doc/make-dylan-app.1 doc/platforms.descr.4,
         [${INSTALL} -m uog+rx $buildroot/tools/shared-misc/mk-build-tree ./
          ${INSTALL} -m uog+rx $buildroot/tools/shared-misc/gen-makefile ./
          (PATH=$buildroot:$PATH; export PATH; perl mk-build-tree -p$srcdir/d2c/compiler/platforms.descr)
          touch $buildroot/force.timestamp
         ], [
              srcdir=$srcdir
              buildroot=$buildroot
])

#--------------------------------------------------------------------
# Describe compilation scenario
#--------------------------------------------------------------------

echo
echo "Build scenario: $SCENARIO"
echo
case $SCENARIO in
    REGULAR_BUILD)
        echo "Compiling d2c. The installed version of d2c will be"
        echo "used to compile programs written in Dylan."
    ;;
    SECOND_STAGE)
        echo "Compiling d2c. The recently compiled version of d2c"
        echo "will be used to compile programs written in Dylan."
        echo
        echo "If you've already done a second stage build and installed"
        echo "a working copy of d2c, you can try 'make bootstrap_clean'."
    ;;
    BOOTSTRAPPING)
        echo "The installed version of d2c will be used to bootstrap this"
        echo "version of d2c. Alternatively, you may want to download"
        echo "up-to-date binaries for your platform. See the README for"
        echo "details."
    ;;
    CROSS_COMPILING)
        echo "You're trying to use d2c as a cross-compiler. You may encounter"
        echo "various problems. If you get it to work, please tell us how"
        echo "you did it."
    ;;
    *)
        echo "Unknown build scenario! This is a bug."
    ;;
esac
if test "$srcdir" != "$buildroot"; then
    echo
    echo "Warning: Your source directory does not appear to be the same as"
    echo "your build directory. Note that several machine-generated source"
    echo "files will be created in the source hierarchy instead of"
    echo "the build hierarchy."
fi
